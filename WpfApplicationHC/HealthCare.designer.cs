#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApplicationHC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-HealthCare")]
	public partial class HealthCareDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertKarton(Karton instance);
    partial void UpdateKarton(Karton instance);
    partial void DeleteKarton(Karton instance);
    partial void InsertLekar(Lekar instance);
    partial void UpdateLekar(Lekar instance);
    partial void DeleteLekar(Lekar instance);
    partial void InsertLekarPregled(LekarPregled instance);
    partial void UpdateLekarPregled(LekarPregled instance);
    partial void DeleteLekarPregled(LekarPregled instance);
    partial void InsertPacijent(Pacijent instance);
    partial void UpdatePacijent(Pacijent instance);
    partial void DeletePacijent(Pacijent instance);
    partial void InsertPregled(Pregled instance);
    partial void UpdatePregled(Pregled instance);
    partial void DeletePregled(Pregled instance);
    #endregion
		
		public HealthCareDataContext() : 
				base(global::WpfApplicationHC.Properties.Settings.Default.aspnet_HealthCareConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HealthCareDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HealthCareDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HealthCareDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HealthCareDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<Karton> Kartons
		{
			get
			{
				return this.GetTable<Karton>();
			}
		}
		
		public System.Data.Linq.Table<Lekar> Lekars
		{
			get
			{
				return this.GetTable<Lekar>();
			}
		}
		
		public System.Data.Linq.Table<LekarPregled> LekarPregleds
		{
			get
			{
				return this.GetTable<LekarPregled>();
			}
		}
		
		public System.Data.Linq.Table<Pacijent> Pacijents
		{
			get
			{
				return this.GetTable<Pacijent>();
			}
		}
		
		public System.Data.Linq.Table<Pregled> Pregleds
		{
			get
			{
				return this.GetTable<Pregled>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[File]")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileID;
		
		private string _ContentType;
		
		private System.Data.Linq.Binary _Content;
		
		private int _FileType;
		
		private System.Nullable<int> _PacijentID;
		
		private string _FileName;
		
		private System.Nullable<int> _LekarID;
		
		private EntityRef<Lekar> _Lekar;
		
		private EntityRef<Pacijent> _Pacijent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileIDChanging(int value);
    partial void OnFileIDChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnContentChanging(System.Data.Linq.Binary value);
    partial void OnContentChanged();
    partial void OnFileTypeChanging(int value);
    partial void OnFileTypeChanged();
    partial void OnPacijentIDChanging(System.Nullable<int> value);
    partial void OnPacijentIDChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnLekarIDChanging(System.Nullable<int> value);
    partial void OnLekarIDChanged();
    #endregion
		
		public File()
		{
			this._Lekar = default(EntityRef<Lekar>);
			this._Pacijent = default(EntityRef<Pacijent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FileID
		{
			get
			{
				return this._FileID;
			}
			set
			{
				if ((this._FileID != value))
				{
					this.OnFileIDChanging(value);
					this.SendPropertyChanging();
					this._FileID = value;
					this.SendPropertyChanged("FileID");
					this.OnFileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentType", DbType="NVarChar(100)")]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileType", DbType="Int NOT NULL")]
		public int FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacijentID", DbType="Int")]
		public System.Nullable<int> PacijentID
		{
			get
			{
				return this._PacijentID;
			}
			set
			{
				if ((this._PacijentID != value))
				{
					if (this._Pacijent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPacijentIDChanging(value);
					this.SendPropertyChanging();
					this._PacijentID = value;
					this.SendPropertyChanged("PacijentID");
					this.OnPacijentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(255)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LekarID", DbType="Int")]
		public System.Nullable<int> LekarID
		{
			get
			{
				return this._LekarID;
			}
			set
			{
				if ((this._LekarID != value))
				{
					if (this._Lekar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLekarIDChanging(value);
					this.SendPropertyChanging();
					this._LekarID = value;
					this.SendPropertyChanged("LekarID");
					this.OnLekarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lekar_File", Storage="_Lekar", ThisKey="LekarID", OtherKey="ID", IsForeignKey=true)]
		public Lekar Lekar
		{
			get
			{
				return this._Lekar.Entity;
			}
			set
			{
				Lekar previousValue = this._Lekar.Entity;
				if (((previousValue != value) 
							|| (this._Lekar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lekar.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Lekar.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._LekarID = value.ID;
					}
					else
					{
						this._LekarID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lekar");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacijent_File", Storage="_Pacijent", ThisKey="PacijentID", OtherKey="ID", IsForeignKey=true)]
		public Pacijent Pacijent
		{
			get
			{
				return this._Pacijent.Entity;
			}
			set
			{
				Pacijent previousValue = this._Pacijent.Entity;
				if (((previousValue != value) 
							|| (this._Pacijent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pacijent.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Pacijent.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._PacijentID = value.ID;
					}
					else
					{
						this._PacijentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pacijent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Karton")]
	public partial class Karton : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KartonID;
		
		private int _PregledID;
		
		private int _PacijentID;
		
		private System.Nullable<int> _Izvestaj;
		
		private EntityRef<Pacijent> _Pacijent;
		
		private EntityRef<Pregled> _Pregled;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKartonIDChanging(int value);
    partial void OnKartonIDChanged();
    partial void OnPregledIDChanging(int value);
    partial void OnPregledIDChanged();
    partial void OnPacijentIDChanging(int value);
    partial void OnPacijentIDChanged();
    partial void OnIzvestajChanging(System.Nullable<int> value);
    partial void OnIzvestajChanged();
    #endregion
		
		public Karton()
		{
			this._Pacijent = default(EntityRef<Pacijent>);
			this._Pregled = default(EntityRef<Pregled>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KartonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int KartonID
		{
			get
			{
				return this._KartonID;
			}
			set
			{
				if ((this._KartonID != value))
				{
					this.OnKartonIDChanging(value);
					this.SendPropertyChanging();
					this._KartonID = value;
					this.SendPropertyChanged("KartonID");
					this.OnKartonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PregledID", DbType="Int NOT NULL")]
		public int PregledID
		{
			get
			{
				return this._PregledID;
			}
			set
			{
				if ((this._PregledID != value))
				{
					if (this._Pregled.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPregledIDChanging(value);
					this.SendPropertyChanging();
					this._PregledID = value;
					this.SendPropertyChanged("PregledID");
					this.OnPregledIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PacijentID", DbType="Int NOT NULL")]
		public int PacijentID
		{
			get
			{
				return this._PacijentID;
			}
			set
			{
				if ((this._PacijentID != value))
				{
					if (this._Pacijent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPacijentIDChanging(value);
					this.SendPropertyChanging();
					this._PacijentID = value;
					this.SendPropertyChanged("PacijentID");
					this.OnPacijentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Izvestaj", DbType="Int")]
		public System.Nullable<int> Izvestaj
		{
			get
			{
				return this._Izvestaj;
			}
			set
			{
				if ((this._Izvestaj != value))
				{
					this.OnIzvestajChanging(value);
					this.SendPropertyChanging();
					this._Izvestaj = value;
					this.SendPropertyChanged("Izvestaj");
					this.OnIzvestajChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacijent_Karton", Storage="_Pacijent", ThisKey="PacijentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Pacijent Pacijent
		{
			get
			{
				return this._Pacijent.Entity;
			}
			set
			{
				Pacijent previousValue = this._Pacijent.Entity;
				if (((previousValue != value) 
							|| (this._Pacijent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pacijent.Entity = null;
						previousValue.Kartons.Remove(this);
					}
					this._Pacijent.Entity = value;
					if ((value != null))
					{
						value.Kartons.Add(this);
						this._PacijentID = value.ID;
					}
					else
					{
						this._PacijentID = default(int);
					}
					this.SendPropertyChanged("Pacijent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pregled_Karton", Storage="_Pregled", ThisKey="PregledID", OtherKey="PregledID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Pregled Pregled
		{
			get
			{
				return this._Pregled.Entity;
			}
			set
			{
				Pregled previousValue = this._Pregled.Entity;
				if (((previousValue != value) 
							|| (this._Pregled.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pregled.Entity = null;
						previousValue.Kartons.Remove(this);
					}
					this._Pregled.Entity = value;
					if ((value != null))
					{
						value.Kartons.Add(this);
						this._PregledID = value.PregledID;
					}
					else
					{
						this._PregledID = default(int);
					}
					this.SendPropertyChanged("Pregled");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lekar")]
	public partial class Lekar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Prezime;
		
		private string _Ime;
		
		private System.DateTime _DatumZaposlenja;
		
		private string _Email;
		
		private EntitySet<File> _Files;
		
		private EntitySet<LekarPregled> _LekarPregleds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPrezimeChanging(string value);
    partial void OnPrezimeChanged();
    partial void OnImeChanging(string value);
    partial void OnImeChanged();
    partial void OnDatumZaposlenjaChanging(System.DateTime value);
    partial void OnDatumZaposlenjaChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Lekar()
		{
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._LekarPregleds = new EntitySet<LekarPregled>(new Action<LekarPregled>(this.attach_LekarPregleds), new Action<LekarPregled>(this.detach_LekarPregleds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prezime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Prezime
		{
			get
			{
				return this._Prezime;
			}
			set
			{
				if ((this._Prezime != value))
				{
					this.OnPrezimeChanging(value);
					this.SendPropertyChanging();
					this._Prezime = value;
					this.SendPropertyChanged("Prezime");
					this.OnPrezimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Ime
		{
			get
			{
				return this._Ime;
			}
			set
			{
				if ((this._Ime != value))
				{
					this.OnImeChanging(value);
					this.SendPropertyChanging();
					this._Ime = value;
					this.SendPropertyChanged("Ime");
					this.OnImeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatumZaposlenja", DbType="DateTime NOT NULL")]
		public System.DateTime DatumZaposlenja
		{
			get
			{
				return this._DatumZaposlenja;
			}
			set
			{
				if ((this._DatumZaposlenja != value))
				{
					this.OnDatumZaposlenjaChanging(value);
					this.SendPropertyChanging();
					this._DatumZaposlenja = value;
					this.SendPropertyChanged("DatumZaposlenja");
					this.OnDatumZaposlenjaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lekar_File", Storage="_Files", ThisKey="ID", OtherKey="LekarID")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lekar_LekarPregled", Storage="_LekarPregleds", ThisKey="ID", OtherKey="LekarID")]
		public EntitySet<LekarPregled> LekarPregleds
		{
			get
			{
				return this._LekarPregleds;
			}
			set
			{
				this._LekarPregleds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Lekar = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Lekar = null;
		}
		
		private void attach_LekarPregleds(LekarPregled entity)
		{
			this.SendPropertyChanging();
			entity.Lekar = this;
		}
		
		private void detach_LekarPregleds(LekarPregled entity)
		{
			this.SendPropertyChanging();
			entity.Lekar = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LekarPregled")]
	public partial class LekarPregled : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LekarPregledID;
		
		private int _LekarID;
		
		private int _PregledID;
		
		private System.Nullable<int> _Participacija;
		
		private EntityRef<Lekar> _Lekar;
		
		private EntityRef<Pregled> _Pregled;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLekarPregledIDChanging(int value);
    partial void OnLekarPregledIDChanged();
    partial void OnLekarIDChanging(int value);
    partial void OnLekarIDChanged();
    partial void OnPregledIDChanging(int value);
    partial void OnPregledIDChanged();
    partial void OnParticipacijaChanging(System.Nullable<int> value);
    partial void OnParticipacijaChanged();
    #endregion
		
		public LekarPregled()
		{
			this._Lekar = default(EntityRef<Lekar>);
			this._Pregled = default(EntityRef<Pregled>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LekarPregledID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LekarPregledID
		{
			get
			{
				return this._LekarPregledID;
			}
			set
			{
				if ((this._LekarPregledID != value))
				{
					this.OnLekarPregledIDChanging(value);
					this.SendPropertyChanging();
					this._LekarPregledID = value;
					this.SendPropertyChanged("LekarPregledID");
					this.OnLekarPregledIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LekarID", DbType="Int NOT NULL")]
		public int LekarID
		{
			get
			{
				return this._LekarID;
			}
			set
			{
				if ((this._LekarID != value))
				{
					if (this._Lekar.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLekarIDChanging(value);
					this.SendPropertyChanging();
					this._LekarID = value;
					this.SendPropertyChanged("LekarID");
					this.OnLekarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PregledID", DbType="Int NOT NULL")]
		public int PregledID
		{
			get
			{
				return this._PregledID;
			}
			set
			{
				if ((this._PregledID != value))
				{
					if (this._Pregled.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPregledIDChanging(value);
					this.SendPropertyChanging();
					this._PregledID = value;
					this.SendPropertyChanged("PregledID");
					this.OnPregledIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Participacija", DbType="Int")]
		public System.Nullable<int> Participacija
		{
			get
			{
				return this._Participacija;
			}
			set
			{
				if ((this._Participacija != value))
				{
					this.OnParticipacijaChanging(value);
					this.SendPropertyChanging();
					this._Participacija = value;
					this.SendPropertyChanged("Participacija");
					this.OnParticipacijaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lekar_LekarPregled", Storage="_Lekar", ThisKey="LekarID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Lekar Lekar
		{
			get
			{
				return this._Lekar.Entity;
			}
			set
			{
				Lekar previousValue = this._Lekar.Entity;
				if (((previousValue != value) 
							|| (this._Lekar.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lekar.Entity = null;
						previousValue.LekarPregleds.Remove(this);
					}
					this._Lekar.Entity = value;
					if ((value != null))
					{
						value.LekarPregleds.Add(this);
						this._LekarID = value.ID;
					}
					else
					{
						this._LekarID = default(int);
					}
					this.SendPropertyChanged("Lekar");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pregled_LekarPregled", Storage="_Pregled", ThisKey="PregledID", OtherKey="PregledID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Pregled Pregled
		{
			get
			{
				return this._Pregled.Entity;
			}
			set
			{
				Pregled previousValue = this._Pregled.Entity;
				if (((previousValue != value) 
							|| (this._Pregled.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pregled.Entity = null;
						previousValue.LekarPregleds.Remove(this);
					}
					this._Pregled.Entity = value;
					if ((value != null))
					{
						value.LekarPregleds.Add(this);
						this._PregledID = value.PregledID;
					}
					else
					{
						this._PregledID = default(int);
					}
					this.SendPropertyChanged("Pregled");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pacijent")]
	public partial class Pacijent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Prezime;
		
		private string _Ime;
		
		private System.DateTime _DatumRegistracije;
		
		private string _Firma;
		
		private EntitySet<File> _Files;
		
		private EntitySet<Karton> _Kartons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPrezimeChanging(string value);
    partial void OnPrezimeChanged();
    partial void OnImeChanging(string value);
    partial void OnImeChanged();
    partial void OnDatumRegistracijeChanging(System.DateTime value);
    partial void OnDatumRegistracijeChanged();
    partial void OnFirmaChanging(string value);
    partial void OnFirmaChanged();
    #endregion
		
		public Pacijent()
		{
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._Kartons = new EntitySet<Karton>(new Action<Karton>(this.attach_Kartons), new Action<Karton>(this.detach_Kartons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prezime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Prezime
		{
			get
			{
				return this._Prezime;
			}
			set
			{
				if ((this._Prezime != value))
				{
					this.OnPrezimeChanging(value);
					this.SendPropertyChanging();
					this._Prezime = value;
					this.SendPropertyChanged("Prezime");
					this.OnPrezimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Ime
		{
			get
			{
				return this._Ime;
			}
			set
			{
				if ((this._Ime != value))
				{
					this.OnImeChanging(value);
					this.SendPropertyChanging();
					this._Ime = value;
					this.SendPropertyChanged("Ime");
					this.OnImeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatumRegistracije", DbType="DateTime NOT NULL")]
		public System.DateTime DatumRegistracije
		{
			get
			{
				return this._DatumRegistracije;
			}
			set
			{
				if ((this._DatumRegistracije != value))
				{
					this.OnDatumRegistracijeChanging(value);
					this.SendPropertyChanging();
					this._DatumRegistracije = value;
					this.SendPropertyChanged("DatumRegistracije");
					this.OnDatumRegistracijeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firma", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Firma
		{
			get
			{
				return this._Firma;
			}
			set
			{
				if ((this._Firma != value))
				{
					this.OnFirmaChanging(value);
					this.SendPropertyChanging();
					this._Firma = value;
					this.SendPropertyChanged("Firma");
					this.OnFirmaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacijent_File", Storage="_Files", ThisKey="ID", OtherKey="PacijentID")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pacijent_Karton", Storage="_Kartons", ThisKey="ID", OtherKey="PacijentID")]
		public EntitySet<Karton> Kartons
		{
			get
			{
				return this._Kartons;
			}
			set
			{
				this._Kartons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Pacijent = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Pacijent = null;
		}
		
		private void attach_Kartons(Karton entity)
		{
			this.SendPropertyChanging();
			entity.Pacijent = this;
		}
		
		private void detach_Kartons(Karton entity)
		{
			this.SendPropertyChanging();
			entity.Pacijent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pregled")]
	public partial class Pregled : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PregledID;
		
		private string _Naziv;
		
		private string _Opis;
		
		private EntitySet<Karton> _Kartons;
		
		private EntitySet<LekarPregled> _LekarPregleds;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPregledIDChanging(int value);
    partial void OnPregledIDChanged();
    partial void OnNazivChanging(string value);
    partial void OnNazivChanged();
    partial void OnOpisChanging(string value);
    partial void OnOpisChanged();
    #endregion
		
		public Pregled()
		{
			this._Kartons = new EntitySet<Karton>(new Action<Karton>(this.attach_Kartons), new Action<Karton>(this.detach_Kartons));
			this._LekarPregleds = new EntitySet<LekarPregled>(new Action<LekarPregled>(this.attach_LekarPregleds), new Action<LekarPregled>(this.detach_LekarPregleds));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PregledID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PregledID
		{
			get
			{
				return this._PregledID;
			}
			set
			{
				if ((this._PregledID != value))
				{
					this.OnPregledIDChanging(value);
					this.SendPropertyChanging();
					this._PregledID = value;
					this.SendPropertyChanged("PregledID");
					this.OnPregledIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Naziv", DbType="NVarChar(MAX)")]
		public string Naziv
		{
			get
			{
				return this._Naziv;
			}
			set
			{
				if ((this._Naziv != value))
				{
					this.OnNazivChanging(value);
					this.SendPropertyChanging();
					this._Naziv = value;
					this.SendPropertyChanged("Naziv");
					this.OnNazivChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Opis", DbType="NVarChar(MAX)")]
		public string Opis
		{
			get
			{
				return this._Opis;
			}
			set
			{
				if ((this._Opis != value))
				{
					this.OnOpisChanging(value);
					this.SendPropertyChanging();
					this._Opis = value;
					this.SendPropertyChanged("Opis");
					this.OnOpisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pregled_Karton", Storage="_Kartons", ThisKey="PregledID", OtherKey="PregledID")]
		public EntitySet<Karton> Kartons
		{
			get
			{
				return this._Kartons;
			}
			set
			{
				this._Kartons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pregled_LekarPregled", Storage="_LekarPregleds", ThisKey="PregledID", OtherKey="PregledID")]
		public EntitySet<LekarPregled> LekarPregleds
		{
			get
			{
				return this._LekarPregleds;
			}
			set
			{
				this._LekarPregleds.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Kartons(Karton entity)
		{
			this.SendPropertyChanging();
			entity.Pregled = this;
		}
		
		private void detach_Kartons(Karton entity)
		{
			this.SendPropertyChanging();
			entity.Pregled = null;
		}
		
		private void attach_LekarPregleds(LekarPregled entity)
		{
			this.SendPropertyChanging();
			entity.Pregled = this;
		}
		
		private void detach_LekarPregleds(LekarPregled entity)
		{
			this.SendPropertyChanging();
			entity.Pregled = null;
		}
	}
}
#pragma warning restore 1591
